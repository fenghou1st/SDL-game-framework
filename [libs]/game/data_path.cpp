#include "data_path.h"

using namespace std;
using namespace fenghou;
using namespace fenghou::game;

// Implementer Interface ///////////////////////////////////////////////////////////////////////////////////////////////

namespace fenghou { namespace game
{
	// Classes /////////////////////////////////////////////////////////////////////////////////////////////////////////

	class DataPath::Impl
	{
	public:
		Impl();
		~Impl();

		void set(const string & base_path, const string & rel_path);
		const string & unpacked_file() const { return _unpacked_file; }
		const string & packed_file() const { return _packed_file; }
		const string & packed_item() const { return _packed_item; }

	private:
		string _unpacked_file;
		string _packed_file;
		string _packed_item;
	};

	// Functions ///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Global Variables ////////////////////////////////////////////////////////////////////////////////////////////////
}}

// Local Field /////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace
{
	// Classes /////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Functions ///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Global Variables ////////////////////////////////////////////////////////////////////////////////////////////////
}

// Global Variables ////////////////////////////////////////////////////////////////////////////////////////////////////

// Functions ///////////////////////////////////////////////////////////////////////////////////////////////////////////

//// DataPath //////////////////////////////////////////////////////////////////////////////////////////////////////////

DataPath::DataPath() : impl(new Impl) {}


DataPath::DataPath(const string & base_path, const string & rel_path)
	: impl(new Impl)
{
	impl->set(base_path, rel_path);
}


DataPath::~DataPath() {}


void DataPath::set(const string & base_path, const string & rel_path) { impl->set(base_path, rel_path); }


const string & DataPath::unpacked_file() const { return impl->unpacked_file(); }


const string & DataPath::packed_file() const { return impl->packed_file(); }


const string & DataPath::packed_item() const { return impl->packed_item(); }


//// DataPath::Impl ////////////////////////////////////////////////////////////////////////////////////////////////////

DataPath::Impl::Impl()
{}


DataPath::Impl::~Impl()
{}


// TODO: convert to both packed and unpacked format
void DataPath::Impl::set(const string & base_path, const string & rel_path)
{
	;
}
